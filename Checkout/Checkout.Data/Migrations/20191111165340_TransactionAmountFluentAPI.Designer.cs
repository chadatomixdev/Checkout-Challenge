// <auto-generated />
using System;
using Checkout.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Checkout.Data.Migrations
{
    [DbContext(typeof(CheckoutDBContext))]
    [Migration("20191111165340_TransactionAmountFluentAPI")]
    partial class TransactionAmountFluentAPI
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Checkout.Data.Model.CardDetails", b =>
                {
                    b.Property<int>("CardDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber");

                    b.Property<string>("Cvv");

                    b.Property<string>("ExpiryMonth");

                    b.Property<string>("ExpiryYear");

                    b.Property<string>("HolderName");

                    b.HasKey("CardDetailsID");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("Checkout.Data.Model.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            Name = "ZAR"
                        },
                        new
                        {
                            CurrencyId = 2,
                            Name = "USD"
                        },
                        new
                        {
                            CurrencyId = 3,
                            Name = "GBP"
                        });
                });

            modelBuilder.Entity("Checkout.Data.Model.Merchant", b =>
                {
                    b.Property<Guid>("MerchantID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("MerchantID");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            MerchantID = new Guid("1d620903-d485-4421-958f-8265c0b41844"),
                            Active = true,
                            Description = "Testing Description 1",
                            Name = "Test Merchant 1"
                        },
                        new
                        {
                            MerchantID = new Guid("311bfb23-11f9-44da-b3f9-ef53da3e6753"),
                            Active = true,
                            Description = "Testing Description 2",
                            Name = "Test Merchant 2"
                        },
                        new
                        {
                            MerchantID = new Guid("5d161a26-91a4-4784-8def-faf0a3f9e8b7"),
                            Active = true,
                            Description = "Testing Description 3",
                            Name = "Test Merchant 3"
                        });
                });

            modelBuilder.Entity("Checkout.Data.Model.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("BankReferenceID");

                    b.Property<int>("CardID");

                    b.Property<int>("CurrencyID");

                    b.Property<Guid>("MerchantID");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("SubStatus")
                        .HasMaxLength(100);

                    b.HasKey("TransactionID");

                    b.HasIndex("CardID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("MerchantID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Checkout.Data.Model.Transaction", b =>
                {
                    b.HasOne("Checkout.Data.Model.CardDetails", "Card")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Checkout.Data.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Checkout.Data.Model.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
